{"id":10,"name":"bakery","agents":[{"archClass":"Jason","name":"kate","sourceCode":"order([item(beer,10),item(chocolate,3)],100).\n\n!order.\n\n+!order: order(Cart, Money) <- \n\t.print(\"[KATE]: This is my Cart: \", Cart);\n\t.print(\"[KATE]: I'm sending it to the Baker.\");\t\n\t.send(baker, tell, order(Cart, Money))."},{"archClass":"Jason","name":"baker","sourceCode":"item(beer,20,1.2).\nitem(chocolate,100,2.5).\n\n+order(Cart, Money)[source(Customer)] <-\n\t.print(\"[BAKERY]: This is \", Customer, \"'s Cart: \", Cart,\". I'm starting to process the order. Cash received is \", Money);\t\n\t+bill(Customer, 0, Money);\n\t!process(Cart, Customer).\n\n+!process([First|Remaining], Customer) <-\n\t\t.print(\"[BAKERY]: Now processing: \", First, \" from \", Customer, \" --- Waiting on the line: \", Remaining);\n\t\t!checkout(First, Customer);\n\t\t!process(Remaining, Customer).\n\n+!process([], Customer) <-\n\t.print(\"[BAKERY]: All items of \", Customer, \"'s order were processed.\");\n\t!finishOrder(Customer).\n\t\n+!checkout(item(Item,Amount), Customer) <-\n\t.findall(item(Item, Stock, Value), item(Item, Stock, Value), Result);\n\t!checkingStock(Result, item(Item,Amount), Customer).\n\n+!checkingStock([item(ItemStock,Stock,Value)],item(Item,Amount), Customer): \n\tbill(Customer, Total, Change) &\n        Stock >= Amount &\n\tChange >= Amount*Value <-\n\t\t-item(Item,_,_);\n\t\t+item(Item,Stock-Amount,Value);\n\t\t.print(\"[BAKERY]: I found \", Stock, \" of \", Item, \" and the order is \", Amount, \". It remains \", Stock-Amount, \" of \", Item, \" in my stock.\");\n\t\t-bill(Customer,_,_);\n\t\t+bill(Customer,Total+(Amount*Value),Change-(Amount*Value));\n\t\t?bill(Customer, NewTotal, NewChange);\n\t\t.print(\"[BAKERY]: The temporary bill for \", Customer ,\" is \", NewTotal, \" and the change is \", NewChange).\n\n-!checkingStock([item(ItemStock,Stock,Value)],item(Item,Amount), Customer):\n\tbill(Customer, Total, Change) &\n\tChange < Amount*Value <-\n\t\t.print(\"[BAKERY]: There is no cash left to buy \", Item);\n\t\t.print(\"[BAKERY]: Remaining cash is \", Change, \". It is necessary at least \", Amount*Value).\n\n-!checkingStock([item(ItemStock,Stock,Value)],item(Item,Amount), Customer):\n\tStock < Amount <-\n\t\t.print(\"[BAKERY]: Sorry! We do not have enough \", Item, \". We only have \", Stock).\n\n+!finishOrder(Customer): \n\tbill(Customer, Total, Change) <-\n\t\t.print(\"[BAKERY]: \", Customer,\"'s RECEIPT: ORDER VALUE:\", Total,\" --- CHANGE:\", Change);\n\t\t.send(Customer,tell,bill(Customer, Total, Change));\n\t\t-bill(Customer,_,_).\n\t"},{"archClass":"Jason","name":"bob","sourceCode":"order([item(chocolate,5)],20).\n\n!order.\n\n+!order: order(Cart, Money) <- \n\t.wait(2000);\n\t.print(\"[BOB]: This is my Cart: \", Cart);\n\t.print(\"[BOB]: I'm sending it to the Baker.\");\t\n\t.send(baker, tell, order(Cart, Money))."},{"archClass":"Jason","name":"teddy","sourceCode":"order([item(beer,8)],10).\n\n!order.\n\n+!order: order(Cart, Money) <- \n\t.wait(1000);\n\t.print(\"[TEDDY]: This is my Cart: \", Cart);\n\t.print(\"[TEDDY]: I'm sending it to the Baker.\");\t\n\t.send(baker, tell, order(Cart, Money))."}],"firmwares":[]}